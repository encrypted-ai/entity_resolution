[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "entity-resolution"
version = "1.0.0"
authors = [
    {name = "Zachary King", email = "contact@entity-resolution.com"},
]
description = "Intelligent column matching using LLMs and fuzzy matching for entity resolution"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Analysts", 
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Framework :: Jupyter",
    "Natural Language :: English",
]
keywords = [
    "entity-resolution",
    "data-integration", 
    "column-matching",
    "data-science",
    "machine-learning",
    "nlp",
    "fuzzy-matching",
    "llm",
    "langchain",
    "pandas",
    "data-quality",
    "schema-matching",
    "data-mapping",
    "artificial-intelligence",
    "data-engineering",
]
dependencies = [
    "langchain>=0.1.0",
    "fuzzywuzzy>=0.18.0",
    "pandas>=2.0.0",
    "openai>=1.0.0",
    "python-levenshtein>=0.12.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "unittest-xml-reporting>=3.2.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
notebook = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/zacharyking/entity-resolution"
"Bug Reports" = "https://github.com/zacharyking/entity-resolution/issues"
Source = "https://github.com/zacharyking/entity-resolution"
Documentation = "https://github.com/zacharyking/entity-resolution/blob/main/README.md"

[project.scripts]
entity-resolution-demo = "entity_resolution.example_usage:main"
entity-resolution-test = "entity_resolution.run_tests:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
entity_resolution = ["*.md", "*.txt"]

# Black code formatting configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["entity_resolution"]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/entity_resolution"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
